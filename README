It starts with a Processing sketch  but soon became a OF project. 
http://openprocessing.org/visuals/?visualID=10188
http://openprocessing.org/visuals/?visualID=10189

The idea is to make a keyboard map maker in order to make my own distribution of keys for a super configurable tools. So, you can make your owns keyboards, control remotes, mouse or dragable control panels for any multiTouch/TUIO projects.

After the migration to OF It still use the same type of config file (one that ends with .kbd) for storing the key distribution. For it, uses polar geometry in order to let it be rotate, scale and drag and continue to be 100% functional.
Note about the .kbd: The first line have the information of the keyboard. Center x and y, the width and height. And the other ones are the keys with their position (on radio and angle), width and height.

On openFrameworks uses ofEvents to handles the pressed keys and need the next addons:

- ofxOsc

- OfxTUIO

- MSAcore

You can follow this project on my blog:
http://www.patriciogonzalezvivo.com/blog/

How to used it:

void testApp::setup(){
	keyboard.loadfont("arial.ttf");
	keyboard.loadmap("map.kbd");
	ofAddListener(keyboard.keyPressed,this,&testApp::virtualKeyPressed);
	
#ifdef USE_TUIO
	ofAddListener(tuioClient.cursorAdded,this,&testApp::tuioAdded);
	ofAddListener(tuioClient.cursorRemoved,this,&testApp::tuioRemoved);
	ofAddListener(tuioClient.cursorUpdated,this,&testApp::tuioUpdated);
	tuioClient.start(3333);
	
	keyboard.setTuioClient(&tuioClient);
#endif	
}

void testApp::update(){
#ifdef USE_TUIO //------------------ TUIO 
	tuioClient.getMessage();
#endif
}

void testApp::draw(){
	keyboard.draw();
}

void testApp::virtualKeyPressed(string & letter){
	cout << letter << endl;
}
